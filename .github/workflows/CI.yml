name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: e-commerce-app
  CONTAINER_NAME: e-commerce-container
  SONAR_PROJECT_KEY: sonar-test-e-commerce_new-sonarscan
  SONAR_ORGANIZATION: sonar-test-e-commerce
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  # --- üîπ Job 1: SonarCloud Scan ---
  sonar-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@a5ac7e51f3c30864cf2b2b8256da7246b15f3972  # v4.2.2

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@b63f5ed676fe7cfa1a3ebad1a3fbb71b5c460e9a  # v2.3.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sources=.
            -Dsonar.java.binaries=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
            -Dsonar.qualitygate.wait=true
            -Dsonar.branch.name=main

  # --- üîπ Job 2: Docker Build + Trivy Scan ---
  build-and-scan:
    runs-on: ubuntu-latest
    needs: sonar-scan  # runs after SonarCloud passes
    steps:
      - name: Checkout repository
        uses: actions/checkout@a5ac7e51f3c30864cf2b2b8256da7246b15f3972  # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@5e4d2b653f76a9f99d5d9c8820596c434efad9e3  # v3.6.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security Dashboard
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  # --- üîπ Job 3: Slack Notification ---
  notify:
    runs-on: ubuntu-latest
    needs: [sonar-scan, build-and-scan]
    if: always()  # runs whether success or failure
    steps:
      - name: Send Slack Success Notification
        if: ${{ needs.sonar-scan.result == 'success' && needs.build-and-scan.result == 'success' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"‚úÖ *CI Pipeline Succeeded!*\nRepository: $GITHUB_REPOSITORY\nBranch: $GITHUB_REF_NAME\nCommit: $GITHUB_SHA\"}" \
          $SLACK_WEBHOOK_URL

      - name: Send Slack Failure Notification
        if: ${{ needs.sonar-scan.result != 'success' || needs.build-and-scan.result != 'success' }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"‚ùå *CI Pipeline Failed!*\nRepository: $GITHUB_REPOSITORY\nBranch: $GITHUB_REF_NAME\nCommit: $GITHUB_SHA\"}" \
          $SLACK_WEBHOOK_URL
