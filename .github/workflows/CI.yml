name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: e-commerce-app
  CONTAINER_NAME: e-commerce-container
  SONAR_PROJECT_KEY: sonar-test-e-commerce_new-sonarscan
  SONAR_ORGANIZATION: sonar-test-e-commerce
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  # =========================
  # Job 1: SonarCloud Analysis
  # =========================
  sonar-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.2.2
        with:
          fetch-depth: 0   # Ensure full Git history for SonarCloud

      - name: Set up Java
        uses: actions/setup-java@cd89f48d36a4a2a6f4d08e2a54f2a8ce3c56012a # v3.13.0
        with:
          distribution: temurin
          java-version: 11

      - name: Cache SonarCloud packages
        uses: actions/cache@0c45773b623bea8c8b6ea8152a1d166aaec7f6b1 # v4.1.1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # --- üîπ Run SonarCloud Scan (pinned commit SHA for security) ---
      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@cdbf3f84d73c2b7c6fdcdfa5f0b9a8c021b67f19
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sources=.
            -Dsonar.java.binaries=target
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
            -Dsonar.coverage.exclusions=**/*   # Skip coverage
            -Dsonar.qualitygate.wait=true
            -Dsonar.branch.name=main

  # =========================
  # Job 2: Docker Build & Scan
  # =========================
  docker-build-scan:
    runs-on: ubuntu-latest
    needs: sonar-scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@2c9110b14d3ab04e8d84b0b8b5cb94f9af1d7a95 # v3.6.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@edfc9d88f1acdc7f6cebd3aa31d63c6e8eb42de0 # v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@cc3efb8d69b264a90ce0d6b8a308f8a61439d10d # v2.0.2

      - name: Build Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@e6e66b1a6dfd7f62f501e671bbda025c8ab9149e # v0.28.0
        with:
          image-ref: ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security Dashboard
        uses: github/codeql-action/upload-sarif@12b464cf6a5e2c93d33df68b405c2ef76bb360f1 # v3.26.9
        with:
          sarif_file: trivy-results.sarif

  # =========================
  # Job 3: Slack Notifications
  # =========================
  slack-notifications:
    runs-on: ubuntu-latest
    needs: [sonar-scan, docker-build-scan]
    steps:
      - name: Send Slack Success Notification
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"‚úÖ *CI Pipeline Succeeded!*\nRepository: $GITHUB_REPOSITORY\nBranch: $GITHUB_REF_NAME\nCommit: $GITHUB_SHA\"}" \
          $SLACK_WEBHOOK_URL

      - name: Send Slack Failure Notification
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"‚ùå *CI Pipeline Failed!*\nRepository: $GITHUB_REPOSITORY\nBranch: $GITHUB_REF_NAME\nCommit: $GITHUB_SHA\"}" \
          $SLACK_WEBHOOK_URL
