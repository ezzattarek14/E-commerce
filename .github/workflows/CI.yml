name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
  
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: e-commerce-app
  CONTAINER_NAME: e-commerce-container
  SONAR_PROJECT_KEY: sonar-test-e-commerce_new-sonarscan
  SONAR_ORGANIZATION: sonar-test-e-commerce

jobs:
  run-test-scan:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- ðŸ”¹ SonarCloud Section ---
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sources=.
            -Dsonar.java.binaries=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
            -Dsonar.qualitygate.wait=true
            -Dsonar.branch.name=master
      # --- ðŸ”¹ End SonarCloud Section ---

      # Step 3: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 4: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 5: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} .

      # --- ðŸ”¹ Step 6: Scan Docker image with Trivy (HTML dashboard) ---
      - name: Scan Docker image with Trivy (HTML dashboard)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'template'
          template: '@/contrib/html.tpl'
          output: 'trivy-report.html'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      # --- ðŸ”¹ Step 7: Upload Trivy Dashboard as Artifact ---
      - name: Upload Trivy Dashboard
        uses: actions/upload-artifact@v4
        with:
          name: trivy-dashboard
          path: trivy-report.html

      # (Optional) Step 8: Push image to ECR or deploy steps
      # - name: Push Docker image to ECR
      #   run: |
      #     docker push ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
