name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: e-commerce-app
  CONTAINER_NAME: e-commerce-container
  SONAR_PROJECT_KEY: sonar-test-e-commerce_new-sonarscan
  SONAR_ORGANIZATION: sonar-test-e-commerce
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  code-analysis:
    runs-on: ubuntu-latest
    outputs:
      sonar-status: ${{ steps.sonar-check.outputs.status }}
    
    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      # Step 2: Set up Java for SonarCloud
      - name: Set up Java
        uses: actions/setup-java@99b8673ff64fbf99d8d175f23978bb914c5d7dc2 # v3.13.0
        with:
          distribution: temurin
          java-version: 11

      # Step 3: SonarCloud Scan
      - name: SonarCloud Scan
        id: sonar-scan
        uses: SonarSource/sonarcloud-github-action@b415c2c32fe8f377153b49e1a5a4c534e4d1b7f7 # v2.1.1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sources=.
            -Dsonar.java.binaries=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
            -Dsonar.qualitygate.wait=true
            -Dsonar.branch.name=main

      # Step 4: Check SonarCloud Quality Gate status
      - name: Check SonarCloud Quality Gate
        id: sonar-check
        run: |
          echo "SonarCloud analysis completed with status: ${{ steps.sonar-scan.outputs.quality-gate-status }}"
          echo "status=${{ steps.sonar-scan.outputs.quality-gate-status }}" >> $GITHUB_OUTPUT

  build-and-scan:
    runs-on: ubuntu-latest
    needs: code-analysis
    if: needs.code-analysis.outputs.sonar-status == 'OK'
    
    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4d134d8b2c8fe6e09c6dbf607d44a0f1a8f7b3d5 # v3.0.0

      # Step 3: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83 # v2.2.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 4: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a # v1.6.0

      # Step 5: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} .

      # Step 6: Scan Docker image with Trivy
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@d71c64a8c6c81c3bd0b11e57e06de8b4b9f3d3e8 # 0.28.0
        with:
          image-ref: ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      # Step 7: Upload Trivy results to GitHub Security Dashboard
      - name: Upload Trivy results to GitHub Security Dashboard
        uses: github/codeql-action/upload-sarif@6c089f6bc4a5b1e98b5ff563898035a5e9242b0a # v3.24.0
        with:
          sarif_file: 'trivy-results.sarif'

  notifications:
    runs-on: ubuntu-latest
    needs: [code-analysis, build-and-scan]
    if: always()
    
    steps:
      # Step 1: Send Success Notification
      - name: Send Slack Success Notification
        if: needs.code-analysis.result == 'success' && needs.build-and-scan.result == 'success'
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"✅ *CI Pipeline Succeeded!*\nRepository: $GITHUB_REPOSITORY\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}\nSonarCloud: PASSED\nContainer Scan: PASSED\"}" \
          ${{ env.SLACK_WEBHOOK_URL }}

      # Step 2: Send Failure Notification
      - name: Send Slack Failure Notification
        if: needs.code-analysis.result == 'failure' || needs.build-and-scan.result == 'failure'
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"❌ *CI Pipeline Failed!*\nRepository: $GITHUB_REPOSITORY\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}\nFailed Job: ${{ needs.*.result }}\"}" \
          ${{ env.SLACK_WEBHOOK_URL }}
